#version 430 core

#define POSITION	0
#define VELOCITY	1
#define ATTRACTOR	2
#define LIFE		3

layout (std140, column_major) uniform;
layout (std430, column_major) buffer;

// Process particles in blocks of 128
layout (local_size_x = 128) in;

layout (binding = POSITION) buffer PositionBuffer {
    vec3 positions[];
};

layout (binding = VELOCITY) buffer VelocityBuffer {
    vec4 velocities[];
};

layout (binding = ATTRACTOR) buffer AttractorBuffer {
    vec4 attractors[];
};

layout (binding = LIFE) buffer LifeBuffer {
    float lifes[];
};

// Delta time
uniform float dt;

highp float rand(vec2 co) {

    highp float a = 12.9898;
    highp float b = 78.233;
    highp float c = 43758.5453;
    highp float dt= dot(co.xy ,vec2(a,b));
    highp float sn= mod(dt,3.14);
    return fract(sin(sn) * c);
}

vec3 calcForceFor (vec3 forcePoint, vec3 pos) {

    // Force:
    float gauss = 10000.0;
    float e = 2.71828183;
    float k_weak = 1.0;
    vec3 dir = forcePoint - pos.xyz;
    float g = pow (e, -pow(length(dir), 2) / gauss);
    vec3 f = normalize(dir) * k_weak * (1+ mod(rand(dir.xy), 10) - mod(rand(dir.yz), 10)) / 10.0 * g;
    return f;
}

void main(void) {

    uint index = gl_GlobalInvocationID.x;

    int i;
    float newDT = dt * 100.0;

    vec3 forcePoint = vec3(0);

    for (i = 0; i < 32; i++) {
        forcePoint += attractors[i].xyz;
    }	

    // Read the current position and velocity from the buffers
    vec4 vel = velocities[index];
    vec3 pos = positions[index];
    float newW = lifes[index];

    float k_v = 1.5;

    vec3 f = calcForceFor(forcePoint, pos) + rand(pos.xz)/100.0;

    // Velocity:
    vec3 v = normalize(vel.xyz + (f * newDT)) * k_v;

    // Eine leichte Anziehung richtung Schwerpunkt...
    v += (forcePoint-pos) * 0.00005;

    // Pos:
    vec3 s = pos + v * newDT;

    newW -= 0.0001f * newDT;

    // If the particle expires, reset it
    if (newW <= 0) {
        s  = -s + rand(s.xy)*20.0 -rand(s.yz)*20.0;
        //v.xyz *= 0.01f;
        newW = 0.99f;
    }

    lifes[index] = newW;
    // Store the new position and velocity back into the buffers
    positions[index] = s;	
    velocities[index] = vec4(v,vel.w);	
}
